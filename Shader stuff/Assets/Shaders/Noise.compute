#pragma kernel CSMain

RWTexture3D<float4> Result;
RWStructuredBuffer<float3> Data;
int numPoints;
float texSize;

float map(float x, float minin, float maxin, float minout, float maxout) {
	float t = (x - minin) / (maxin - minin);

	return t * (maxout - minout) + minout;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float dist = 1000;
	float3 pixel = id.xyz;

	for (int i = 0; i < numPoints; i++) 
	{
		float3 scaledId = id / texSize - float3(0.5f, 0.5f, 0.5f);
		float dx = scaledId.x - Data[i].x;
		float dy = scaledId.y - Data[i].y;
		float dz = scaledId.z - Data[i].z;
		float d = pow(dx * dx + dy * dy + dz * dz, 0.5f);
		
		if (d < dist) {
			dist = d;
		}
	}

	float dn = 1 - map(dist, 0, 0.6f, 0, 1.0f);

	Result[id] = float4(dn, dn, dn, dn);
}
