#pragma kernel CSMain

RWTexture3D<float4> Result;
RWStructuredBuffer<float3> Data0;
RWStructuredBuffer<float3> Data1;
RWStructuredBuffer<float3> Data2;
int numPoints;
float texSize;

float map(float x, float minin, float maxin, float minout, float maxout) {
	float t = (x - minin) / (maxin - minin);

	return t * (maxout - minout) + minout;
}

float fmod(float x, float t) {
	return x - t * floor(x / t);
}

float worley(float3 position, RWStructuredBuffer<float3> points) {
	float dist = 1000;

	for (int i = 0; i < numPoints; i++)
	{
		float3 scaledId = position / texSize - float3(0.5f, 0.5f, 0.5f);
		float dx = scaledId.x - points[i].x;
		float dy = scaledId.y - points[i].y;
		float dz = scaledId.z - points[i].z;
		float d = pow(dx * dx + dy * dy + dz * dz, 0.5f);

		if (d < dist) {
			dist = d;
		}
	}

	return 1 - map(dist, 0, 0.6f, 0, 1.0f);
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

	float3 wp1 = float3(fmod(2 * id.x, texSize), fmod(2 * id.y, texSize), fmod(2 * id.z, texSize));
	float3 wp2 = float3(fmod(4 * id.x, texSize), fmod(4 * id.y, texSize), fmod(4 * id.z, texSize));

	float dr = worley(id.xyz, Data0);
	float dg = worley(wp1, Data1);
	float db = worley(wp2, Data2);

	float sum = (dr + dg / 2 + db / 4) / 1.75;

	Result[id] = float4(sum, sum, sum, 0);
}
